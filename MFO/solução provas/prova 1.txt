Fixpoint evenb (n:nat) : bool :=
  match n with
  | O        => true
  | S O      => false
  | S (S n') => evenb n'
  end.

Definition oddb (n:nat) : bool   :=   negb (evenb n).

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

Theorem plus_n_Sm : forall n m : nat,
  S (n + m) = n + (S m).
Proof.
  intros n m. induction n as [|n' IHn'].
  - reflexivity.
  - simpl. rewrite <- IHn'. reflexivity.
Qed.

Theorem negb_involutive : forall b : bool,
  negb (negb b) = b.
Proof.
  intros b. destruct b eqn:E.
  - reflexivity.
  - reflexivity.  
Qed.

Lemma evenb_SS : forall n : nat,
  evenb (S (S n)) =  evenb n.
Proof.
  intros n. simpl. reflexivity.
Qed.


Theorem evenb_2 : forall n:nat,
  evenb (2 * n) = true.
Proof. intro n. simpl. rewrite <- plus_n_O. induction n as [|n' IH].
  - reflexivity.
  - rewrite <- plus_n_Sm. simpl. apply IH.
Qed.


Theorem even_S_odd : forall n, 
  evenb n = oddb (S n).
Proof.
  intros n. unfold oddb. induction n as [|n' IH].
  - reflexivity.
  - rewrite evenb_SS. rewrite IH. rewrite negb_involutive.
    reflexivity.
Qed.

Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).


Fixpoint combine {X Y : Type} (lx : list X) (ly : list Y) : list (X*Y) :=
  match lx, ly with
  | [], _ => []
  | _, [] => []
  | x :: tx, y :: ty => (x, y) :: (combine tx ty)
  end.

Theorem combine_nil : forall (X: Type) (Y: Type) (l1: list X)  (l2:list Y),
  l1 = [] \/ l2 = [] -> combine l1 l2 = [].
Proof.
  intros X Y l1 l2 [H1 | H2].
  - rewrite H1. reflexivity.
  - rewrite H2. destruct l1 as [|h t].
    + reflexivity.
    + reflexivity.
Qed.

Theorem ineq_sym : forall (X:Type) (n m:X),
  n <> m -> m <> n.
Proof.
  intros X n m. unfold not. intros H1 H2. apply H1. symmetry.
  apply H2.
Qed.


Theorem iff_trans : forall P Q R : Prop,
  (P <-> Q) -> (Q <-> R) -> (P <-> R).
Proof.
  intros P Q R H1 H2. destruct H1 as [H3 H4]. 
  destruct H2 as [H5 H6]. split.
  - intro H7. apply H3 in H7. apply H5 in H7. apply H7.
  - intro H7. apply H6 in H7. apply H4 in H7. apply H7.
Qed.






  